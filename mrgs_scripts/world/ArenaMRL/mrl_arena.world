define hokuyolaser ranger
(
  
  sensor(       
    #laser-specific properties
    #factory settings for LMS200  
    range [ 0.0  5.0 ]
    fov 180.0
    samples 180
  )
  
  model
  (
    # generic model properties
   size [ 0.070 0.070 0.050 ] # dimensions from LMS200 data sheet  
    color "blue"
  )
)

define my_block model
(
  size [0.5 0.5 0.5]
  gui_nose 0
)


define floorplan model
(
  	# Sombre, sensible, artistic
  	color "gray30"

	# Most maps will need a bounding box
	boundary 1

	gui_nose 0
	gui_grid 0
	gui_move 0
	gui_outline 0
	gripper_return 0
	fiducial_return 0
	laser_return 1
)

# Set the resolution of the underlying raytrace model in meters
resolution 0.025

interval_sim 100  # simulation timestep in milliseconds


# Configure the GUI window
window( 
  size [ 720 692 1] 		# Tamanho da janela em pixeis
  rotate [ 0.000 0.000 ]	# Mapa nÃ£o rodado
  center [5.975 6.225 ]		# Centro da Janela no ponto central do ambiente (em metros)
  scale 35.000 			# zoom da janela
  show_data 1   

)

# load an environment bitmap
floorplan
( 
  	name "lab_maze"
  	size [4.060 4.550  1.000]
  	pose [1.000 1.000 0.000 0.000]
  	bitmap "mrl_arena.pgm"
)


# throw in a robot
# my_block( pose [ 5 4 0 180.000 ] color "green")


define pioneer_base position 
(
  color "red"      # Default color.
  drive "diff"       # Differential steering model.
  gui_nose 1                    # Draw a nose on the robot so we can see which way it points
  obstacle_return 1             # Can hit things.
  ranger_return 0.500              # reflects sonar beams
  blob_return 1                 # Seen by blobfinders  
  fiducial_return 1             # Seen as "1" fiducial finders

  localization "gps"             
  localization_origin [0 0 0 0]   # Start odometry at (0, 0, 0).

  # alternative odometric localization with simple error model
  # localization "odom"             # Change to "gps" to have impossibly perfect, global odometry
  #  odom_error [ 0.05 0.05 0.1 ]     # Odometry error or slip in X, Y and Theta
                                     # (Uniform random distribution)   

  # four DOF kinematics limits
  # [ xmin xmax ymin ymax zmin zmax amin amax ]        
  #velocity_bounds [-0.5 0.5 0 0 0 0 -90.0 90.0 ]          
  #acceleration_bounds [-0.5 0.5 0 0 0 0 -90 90.0 ]
)



define pioneer2dx_base_no_sonar pioneer_base
(
  # actual size
  size [0.440 0.380 0.220] # sizes from MobileRobots' web site

  # the pioneer's center of rotation is offset from its center of area
  origin [-0.040 0.000 0.000 0.000]

  # draw a nose on the robot so we can see which way it points
  gui_nose 1

  # estimated mass in KG
  mass 23.0 
  # differential steering model
  drive "diff"
 )


define pioneer2dx_no_sonar pioneer2dx_base_no_sonar
(  
  # simplified Body shape:
  block( 
    points 8
    point[0] [-0.2 0.12]
    point[1] [-0.2 -0.12]
    point[2] [-0.12 -0.2555]
    point[3] [0.12 -0.2555]
    point[4] [0.2 -0.12]
    point[5] [0.2 0.12]
    point[6] [0.12 0.2555]
    point[7] [-0.12 0.2555]
    z [0 0.22]
  )

)


pioneer2dx_no_sonar 
(
  # can refer to the robot by this name
  name "r0"
  pose [ -0.607 2.800 0.000 0.000 ]

  drive "diff"

  # Report error-free position in world coordinates
  localization "gps"
  localization_origin [ 0 0 0 0 ]

  hokuyolaser(pose [ 0.225 0.000 -0.150 0.000 ])
)
